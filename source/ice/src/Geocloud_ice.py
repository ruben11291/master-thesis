# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `Geocloud.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__

# Start of module geocloud
_M_geocloud = Ice.openModule('geocloud')
__name__ = 'geocloud'

if not _M_geocloud.__dict__.has_key('AlreadyExists'):
    _M_geocloud.AlreadyExists = Ice.createTempClass()
    class AlreadyExists(Ice.UserException):
        def __init__(self, key=''):
            self.key = key

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'geocloud::AlreadyExists'

    _M_geocloud._t_AlreadyExists = IcePy.defineException('::geocloud::AlreadyExists', AlreadyExists, (), None, (('key', (), IcePy._t_string),))
    AlreadyExists._ice_type = _M_geocloud._t_AlreadyExists

    _M_geocloud.AlreadyExists = AlreadyExists
    del AlreadyExists

if not _M_geocloud.__dict__.has_key('NoSuchKey'):
    _M_geocloud.NoSuchKey = Ice.createTempClass()
    class NoSuchKey(Ice.UserException):
        def __init__(self, key=''):
            self.key = key

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'geocloud::NoSuchKey'

    _M_geocloud._t_NoSuchKey = IcePy.defineException('::geocloud::NoSuchKey', NoSuchKey, (), None, (('key', (), IcePy._t_string),))
    NoSuchKey._ice_type = _M_geocloud._t_NoSuchKey

    _M_geocloud.NoSuchKey = NoSuchKey
    del NoSuchKey

if not _M_geocloud.__dict__.has_key('CreationScenarioException'):
    _M_geocloud.CreationScenarioException = Ice.createTempClass()
    class CreationScenarioException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'geocloud::CreationScenarioException'

    _M_geocloud._t_CreationScenarioException = IcePy.defineException('::geocloud::CreationScenarioException', CreationScenarioException, (), None, ())
    CreationScenarioException._ice_type = _M_geocloud._t_CreationScenarioException

    _M_geocloud.CreationScenarioException = CreationScenarioException
    del CreationScenarioException

if not _M_geocloud.__dict__.has_key('StartScenarioException'):
    _M_geocloud.StartScenarioException = Ice.createTempClass()
    class StartScenarioException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'geocloud::StartScenarioException'

    _M_geocloud._t_StartScenarioException = IcePy.defineException('::geocloud::StartScenarioException', StartScenarioException, (), None, ())
    StartScenarioException._ice_type = _M_geocloud._t_StartScenarioException

    _M_geocloud.StartScenarioException = StartScenarioException
    del StartScenarioException

if not _M_geocloud.__dict__.has_key('StopScenarioException'):
    _M_geocloud.StopScenarioException = Ice.createTempClass()
    class StopScenarioException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'geocloud::StopScenarioException'

    _M_geocloud._t_StopScenarioException = IcePy.defineException('::geocloud::StopScenarioException', StopScenarioException, (), None, ())
    StopScenarioException._ice_type = _M_geocloud._t_StopScenarioException

    _M_geocloud.StopScenarioException = StopScenarioException
    del StopScenarioException

if not _M_geocloud.__dict__.has_key('DeleteScenarioException'):
    _M_geocloud.DeleteScenarioException = Ice.createTempClass()
    class DeleteScenarioException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'geocloud::DeleteScenarioException'

    _M_geocloud._t_DeleteScenarioException = IcePy.defineException('::geocloud::DeleteScenarioException', DeleteScenarioException, (), None, ())
    DeleteScenarioException._ice_type = _M_geocloud._t_DeleteScenarioException

    _M_geocloud.DeleteScenarioException = DeleteScenarioException
    del DeleteScenarioException

if not _M_geocloud.__dict__.has_key('ArchiveNotAvailableException'):
    _M_geocloud.ArchiveNotAvailableException = Ice.createTempClass()
    class ArchiveNotAvailableException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'geocloud::ArchiveNotAvailableException'

    _M_geocloud._t_ArchiveNotAvailableException = IcePy.defineException('::geocloud::ArchiveNotAvailableException', ArchiveNotAvailableException, (), None, ())
    ArchiveNotAvailableException._ice_type = _M_geocloud._t_ArchiveNotAvailableException

    _M_geocloud.ArchiveNotAvailableException = ArchiveNotAvailableException
    del ArchiveNotAvailableException

if not _M_geocloud.__dict__.has_key('OrchestratorNotAvailableException'):
    _M_geocloud.OrchestratorNotAvailableException = Ice.createTempClass()
    class OrchestratorNotAvailableException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'geocloud::OrchestratorNotAvailableException'

    _M_geocloud._t_OrchestratorNotAvailableException = IcePy.defineException('::geocloud::OrchestratorNotAvailableException', OrchestratorNotAvailableException, (), None, ())
    OrchestratorNotAvailableException._ice_type = _M_geocloud._t_OrchestratorNotAvailableException

    _M_geocloud.OrchestratorNotAvailableException = OrchestratorNotAvailableException
    del OrchestratorNotAvailableException

if not _M_geocloud.__dict__.has_key('ProcessingException'):
    _M_geocloud.ProcessingException = Ice.createTempClass()
    class ProcessingException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'geocloud::ProcessingException'

    _M_geocloud._t_ProcessingException = IcePy.defineException('::geocloud::ProcessingException', ProcessingException, (), None, ())
    ProcessingException._ice_type = _M_geocloud._t_ProcessingException

    _M_geocloud.ProcessingException = ProcessingException
    del ProcessingException

if not _M_geocloud.__dict__.has_key('CataloguingException'):
    _M_geocloud.CataloguingException = Ice.createTempClass()
    class CataloguingException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'geocloud::CataloguingException'

    _M_geocloud._t_CataloguingException = IcePy.defineException('::geocloud::CataloguingException', CataloguingException, (), None, ())
    CataloguingException._ice_type = _M_geocloud._t_CataloguingException

    _M_geocloud.CataloguingException = CataloguingException
    del CataloguingException

if not _M_geocloud.__dict__.has_key('Orchestrator'):
    _M_geocloud.Orchestrator = Ice.createTempClass()
    class Orchestrator(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_geocloud.Orchestrator:
                raise RuntimeError('geocloud.Orchestrator is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::geocloud::Orchestrator')

        def ice_id(self, current=None):
            return '::geocloud::Orchestrator'

        def ice_staticId():
            return '::geocloud::Orchestrator'
        ice_staticId = staticmethod(ice_staticId)

        def initScenario(self, scen, current=None):
            pass

        def downloadedImage(self, path, current=None):
            pass

        def imageProcessed(self, path, current=None):
            pass

        def imageCatalogued(self, path, current=None):
            pass

        def stopScenario(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_geocloud._t_Orchestrator)

        __repr__ = __str__

    _M_geocloud.OrchestratorPrx = Ice.createTempClass()
    class OrchestratorPrx(Ice.ObjectPrx):

        def initScenario(self, scen, _ctx=None):
            return _M_geocloud.Orchestrator._op_initScenario.invoke(self, ((scen, ), _ctx))

        def begin_initScenario(self, scen, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_geocloud.Orchestrator._op_initScenario.begin(self, ((scen, ), _response, _ex, _sent, _ctx))

        def end_initScenario(self, _r):
            return _M_geocloud.Orchestrator._op_initScenario.end(self, _r)

        def downloadedImage(self, path, _ctx=None):
            return _M_geocloud.Orchestrator._op_downloadedImage.invoke(self, ((path, ), _ctx))

        def begin_downloadedImage(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_geocloud.Orchestrator._op_downloadedImage.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        def end_downloadedImage(self, _r):
            return _M_geocloud.Orchestrator._op_downloadedImage.end(self, _r)

        def imageProcessed(self, path, _ctx=None):
            return _M_geocloud.Orchestrator._op_imageProcessed.invoke(self, ((path, ), _ctx))

        def begin_imageProcessed(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_geocloud.Orchestrator._op_imageProcessed.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        def end_imageProcessed(self, _r):
            return _M_geocloud.Orchestrator._op_imageProcessed.end(self, _r)

        def imageCatalogued(self, path, _ctx=None):
            return _M_geocloud.Orchestrator._op_imageCatalogued.invoke(self, ((path, ), _ctx))

        def begin_imageCatalogued(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_geocloud.Orchestrator._op_imageCatalogued.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        def end_imageCatalogued(self, _r):
            return _M_geocloud.Orchestrator._op_imageCatalogued.end(self, _r)

        def stopScenario(self, _ctx=None):
            return _M_geocloud.Orchestrator._op_stopScenario.invoke(self, ((), _ctx))

        def begin_stopScenario(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_geocloud.Orchestrator._op_stopScenario.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_stopScenario(self, _r):
            return _M_geocloud.Orchestrator._op_stopScenario.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_geocloud.OrchestratorPrx.ice_checkedCast(proxy, '::geocloud::Orchestrator', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_geocloud.OrchestratorPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_geocloud._t_OrchestratorPrx = IcePy.defineProxy('::geocloud::Orchestrator', OrchestratorPrx)

    _M_geocloud._t_Orchestrator = IcePy.defineClass('::geocloud::Orchestrator', Orchestrator, (), True, None, (), ())
    Orchestrator._ice_type = _M_geocloud._t_Orchestrator

    Orchestrator._op_initScenario = IcePy.Operation('initScenario', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_int),), (), None, (_M_geocloud._t_StartScenarioException, _M_geocloud._t_ArchiveNotAvailableException))
    Orchestrator._op_downloadedImage = IcePy.Operation('downloadedImage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), None, ())
    Orchestrator._op_imageProcessed = IcePy.Operation('imageProcessed', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), None, ())
    Orchestrator._op_imageCatalogued = IcePy.Operation('imageCatalogued', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), None, ())
    Orchestrator._op_stopScenario = IcePy.Operation('stopScenario', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), None, (_M_geocloud._t_StopScenarioException,))

    _M_geocloud.Orchestrator = Orchestrator
    del Orchestrator

    _M_geocloud.OrchestratorPrx = OrchestratorPrx
    del OrchestratorPrx

if not _M_geocloud.__dict__.has_key('Broker'):
    _M_geocloud.Broker = Ice.createTempClass()
    class Broker(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_geocloud.Broker:
                raise RuntimeError('geocloud.Broker is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::geocloud::Broker')

        def ice_id(self, current=None):
            return '::geocloud::Broker'

        def ice_staticId():
            return '::geocloud::Broker'
        ice_staticId = staticmethod(ice_staticId)

        def startScenario(self, scen, current=None):
            pass

        def appendLog(self, newLog, current=None):
            pass

        def stopScenario(self, scen, current=None):
            pass

        def setOrchestrator(self, orch, current=None):
            pass

        def getLastLogs(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_geocloud._t_Broker)

        __repr__ = __str__

    _M_geocloud.BrokerPrx = Ice.createTempClass()
    class BrokerPrx(Ice.ObjectPrx):

        def startScenario(self, scen, _ctx=None):
            return _M_geocloud.Broker._op_startScenario.invoke(self, ((scen, ), _ctx))

        def begin_startScenario(self, scen, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_geocloud.Broker._op_startScenario.begin(self, ((scen, ), _response, _ex, _sent, _ctx))

        def end_startScenario(self, _r):
            return _M_geocloud.Broker._op_startScenario.end(self, _r)

        def appendLog(self, newLog, _ctx=None):
            return _M_geocloud.Broker._op_appendLog.invoke(self, ((newLog, ), _ctx))

        def begin_appendLog(self, newLog, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_geocloud.Broker._op_appendLog.begin(self, ((newLog, ), _response, _ex, _sent, _ctx))

        def end_appendLog(self, _r):
            return _M_geocloud.Broker._op_appendLog.end(self, _r)

        def stopScenario(self, scen, _ctx=None):
            return _M_geocloud.Broker._op_stopScenario.invoke(self, ((scen, ), _ctx))

        def begin_stopScenario(self, scen, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_geocloud.Broker._op_stopScenario.begin(self, ((scen, ), _response, _ex, _sent, _ctx))

        def end_stopScenario(self, _r):
            return _M_geocloud.Broker._op_stopScenario.end(self, _r)

        def setOrchestrator(self, orch, _ctx=None):
            return _M_geocloud.Broker._op_setOrchestrator.invoke(self, ((orch, ), _ctx))

        def begin_setOrchestrator(self, orch, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_geocloud.Broker._op_setOrchestrator.begin(self, ((orch, ), _response, _ex, _sent, _ctx))

        def end_setOrchestrator(self, _r):
            return _M_geocloud.Broker._op_setOrchestrator.end(self, _r)

        def getLastLogs(self, _ctx=None):
            return _M_geocloud.Broker._op_getLastLogs.invoke(self, ((), _ctx))

        def begin_getLastLogs(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_geocloud.Broker._op_getLastLogs.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getLastLogs(self, _r):
            return _M_geocloud.Broker._op_getLastLogs.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_geocloud.BrokerPrx.ice_checkedCast(proxy, '::geocloud::Broker', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_geocloud.BrokerPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_geocloud._t_BrokerPrx = IcePy.defineProxy('::geocloud::Broker', BrokerPrx)

    _M_geocloud._t_Broker = IcePy.defineClass('::geocloud::Broker', Broker, (), True, None, (), ())
    Broker._ice_type = _M_geocloud._t_Broker

    Broker._op_startScenario = IcePy.Operation('startScenario', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_int),), (), None, (_M_geocloud._t_OrchestratorNotAvailableException, _M_geocloud._t_StartScenarioException))
    Broker._op_appendLog = IcePy.Operation('appendLog', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), None, ())
    Broker._op_stopScenario = IcePy.Operation('stopScenario', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_int),), (), None, ())
    Broker._op_setOrchestrator = IcePy.Operation('setOrchestrator', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_geocloud._t_OrchestratorPrx),), (), None, ())
    Broker._op_getLastLogs = IcePy.Operation('getLastLogs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), IcePy._t_string, ())

    _M_geocloud.Broker = Broker
    del Broker

    _M_geocloud.BrokerPrx = BrokerPrx
    del BrokerPrx

if not _M_geocloud.__dict__.has_key('Processor'):
    _M_geocloud.Processor = Ice.createTempClass()
    class Processor(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_geocloud.Processor:
                raise RuntimeError('geocloud.Processor is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::geocloud::Processor')

        def ice_id(self, current=None):
            return '::geocloud::Processor'

        def ice_staticId():
            return '::geocloud::Processor'
        ice_staticId = staticmethod(ice_staticId)

        def processImage(self, path, current=None):
            pass

        def shutdown(self, current=None):
            pass

        def setOrchestrator(self, orch, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_geocloud._t_Processor)

        __repr__ = __str__

    _M_geocloud.ProcessorPrx = Ice.createTempClass()
    class ProcessorPrx(Ice.ObjectPrx):

        def processImage(self, path, _ctx=None):
            return _M_geocloud.Processor._op_processImage.invoke(self, ((path, ), _ctx))

        def begin_processImage(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_geocloud.Processor._op_processImage.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        def end_processImage(self, _r):
            return _M_geocloud.Processor._op_processImage.end(self, _r)

        def shutdown(self, _ctx=None):
            return _M_geocloud.Processor._op_shutdown.invoke(self, ((), _ctx))

        def begin_shutdown(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_geocloud.Processor._op_shutdown.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_shutdown(self, _r):
            return _M_geocloud.Processor._op_shutdown.end(self, _r)

        def setOrchestrator(self, orch, _ctx=None):
            return _M_geocloud.Processor._op_setOrchestrator.invoke(self, ((orch, ), _ctx))

        def begin_setOrchestrator(self, orch, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_geocloud.Processor._op_setOrchestrator.begin(self, ((orch, ), _response, _ex, _sent, _ctx))

        def end_setOrchestrator(self, _r):
            return _M_geocloud.Processor._op_setOrchestrator.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_geocloud.ProcessorPrx.ice_checkedCast(proxy, '::geocloud::Processor', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_geocloud.ProcessorPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_geocloud._t_ProcessorPrx = IcePy.defineProxy('::geocloud::Processor', ProcessorPrx)

    _M_geocloud._t_Processor = IcePy.defineClass('::geocloud::Processor', Processor, (), True, None, (), ())
    Processor._ice_type = _M_geocloud._t_Processor

    Processor._op_processImage = IcePy.Operation('processImage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), None, (_M_geocloud._t_ProcessingException,))
    Processor._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), None, ())
    Processor._op_setOrchestrator = IcePy.Operation('setOrchestrator', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_geocloud._t_OrchestratorPrx),), (), None, ())

    _M_geocloud.Processor = Processor
    del Processor

    _M_geocloud.ProcessorPrx = ProcessorPrx
    del ProcessorPrx

if not _M_geocloud.__dict__.has_key('ArchiveAndCatalogue'):
    _M_geocloud.ArchiveAndCatalogue = Ice.createTempClass()
    class ArchiveAndCatalogue(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_geocloud.ArchiveAndCatalogue:
                raise RuntimeError('geocloud.ArchiveAndCatalogue is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::geocloud::ArchiveAndCatalogue')

        def ice_id(self, current=None):
            return '::geocloud::ArchiveAndCatalogue'

        def ice_staticId():
            return '::geocloud::ArchiveAndCatalogue'
        ice_staticId = staticmethod(ice_staticId)

        def setBroker(self, bro, current=None):
            pass

        def createScenario(self, scenario, current=None):
            pass

        def catalogue(self, path, storage, scenario, current=None):
            pass

        def deleteScenario(self, scenario, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_geocloud._t_ArchiveAndCatalogue)

        __repr__ = __str__

    _M_geocloud.ArchiveAndCataloguePrx = Ice.createTempClass()
    class ArchiveAndCataloguePrx(Ice.ObjectPrx):

        def setBroker(self, bro, _ctx=None):
            return _M_geocloud.ArchiveAndCatalogue._op_setBroker.invoke(self, ((bro, ), _ctx))

        def begin_setBroker(self, bro, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_geocloud.ArchiveAndCatalogue._op_setBroker.begin(self, ((bro, ), _response, _ex, _sent, _ctx))

        def end_setBroker(self, _r):
            return _M_geocloud.ArchiveAndCatalogue._op_setBroker.end(self, _r)

        def createScenario(self, scenario, _ctx=None):
            return _M_geocloud.ArchiveAndCatalogue._op_createScenario.invoke(self, ((scenario, ), _ctx))

        def begin_createScenario(self, scenario, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_geocloud.ArchiveAndCatalogue._op_createScenario.begin(self, ((scenario, ), _response, _ex, _sent, _ctx))

        def end_createScenario(self, _r):
            return _M_geocloud.ArchiveAndCatalogue._op_createScenario.end(self, _r)

        def catalogue(self, path, storage, scenario, _ctx=None):
            return _M_geocloud.ArchiveAndCatalogue._op_catalogue.invoke(self, ((path, storage, scenario), _ctx))

        def begin_catalogue(self, path, storage, scenario, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_geocloud.ArchiveAndCatalogue._op_catalogue.begin(self, ((path, storage, scenario), _response, _ex, _sent, _ctx))

        def end_catalogue(self, _r):
            return _M_geocloud.ArchiveAndCatalogue._op_catalogue.end(self, _r)

        def deleteScenario(self, scenario, _ctx=None):
            return _M_geocloud.ArchiveAndCatalogue._op_deleteScenario.invoke(self, ((scenario, ), _ctx))

        def begin_deleteScenario(self, scenario, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_geocloud.ArchiveAndCatalogue._op_deleteScenario.begin(self, ((scenario, ), _response, _ex, _sent, _ctx))

        def end_deleteScenario(self, _r):
            return _M_geocloud.ArchiveAndCatalogue._op_deleteScenario.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_geocloud.ArchiveAndCataloguePrx.ice_checkedCast(proxy, '::geocloud::ArchiveAndCatalogue', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_geocloud.ArchiveAndCataloguePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_geocloud._t_ArchiveAndCataloguePrx = IcePy.defineProxy('::geocloud::ArchiveAndCatalogue', ArchiveAndCataloguePrx)

    _M_geocloud._t_ArchiveAndCatalogue = IcePy.defineClass('::geocloud::ArchiveAndCatalogue', ArchiveAndCatalogue, (), True, None, (), ())
    ArchiveAndCatalogue._ice_type = _M_geocloud._t_ArchiveAndCatalogue

    ArchiveAndCatalogue._op_setBroker = IcePy.Operation('setBroker', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_geocloud._t_BrokerPrx),), (), None, ())
    ArchiveAndCatalogue._op_createScenario = IcePy.Operation('createScenario', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), None, (_M_geocloud._t_CreationScenarioException,))
    ArchiveAndCatalogue._op_catalogue = IcePy.Operation('catalogue', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string), ((), IcePy._t_string), ((), IcePy._t_string)), (), None, (_M_geocloud._t_CataloguingException,))
    ArchiveAndCatalogue._op_deleteScenario = IcePy.Operation('deleteScenario', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_int),), (), None, (_M_geocloud._t_DeleteScenarioException,))

    _M_geocloud.ArchiveAndCatalogue = ArchiveAndCatalogue
    del ArchiveAndCatalogue

    _M_geocloud.ArchiveAndCataloguePrx = ArchiveAndCataloguePrx
    del ArchiveAndCataloguePrx

# End of module geocloud
